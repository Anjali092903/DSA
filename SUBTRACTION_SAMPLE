public class ArraySubtract {
    public static void main(String[] args) {
        // Example 1
        // arr1 = 321, arr2 = 123
        int[] arr1 = {3, 2, 1};   // represents 321
        int[] arr2 = {1, 2, 3};   // represents 123
        subtractAndPrint(arr1, arr2); // Call method to subtract

        System.out.println("----");

        // Example 2
        // arr3 = 1234, arr4 = 21
        int[] arr3 = {1, 2, 3, 4};   // represents 1234
        int[] arr4 = {2, 1};         // represents 21
        subtractAndPrint(arr3, arr4); // Call method to subtract
    }

    // Method to subtract two arrays digit by digit
    // without converting them into integers
    public static void subtractAndPrint(int[] arr1, int[] arr2) {
        int n1 = arr1.length;  // size of first array (arr1)
        int n2 = arr2.length;  // size of second array (arr2)

        // Result array will be as big as the larger input array
        int[] result = new int[Math.max(n1, n2)];

        // Start from the last index of each array (rightmost digit)
        int i = n1 - 1; // pointer for arr1
        int j = n2 - 1; // pointer for arr2
        int k = result.length - 1; // pointer for result array

        int borrow = 0; // to handle borrow when d1 < d2

        // Loop until we fill the result array from right to left
        while (k >= 0) {
            // Get digit from arr1, or 0 if arr1 is exhausted
            int d1 = (i >= 0) ? arr1[i] : 0;
            // Get digit from arr2, or 0 if arr2 is exhausted
            int d2 = (j >= 0) ? arr2[j] : 0;

            // Apply previous borrow (if any) to d1
            d1 = d1 + borrow;

            // If d1 is smaller than d2, we need to borrow
            if (d1 < d2) {
                d1 = d1 + 10;   // add 10 to d1 to make subtraction possible
                borrow = -1;    // borrow from the next left digit
            } else {
                borrow = 0;     // no borrow required
            }

            // Subtract the digits
            int diff = d1 - d2;

            // Store result in result array
            result[k] = diff;

            // Move to the next digits (towards left side)
            i--; 
            j--; 
            k--;
        }

        // Remove leading zeros from result
        int start = 0;
        while (start < result.length && result[start] == 0) {
            start++;
        }

        // Print the final result
        // If start == result.length, it means result is 0
        for (int idx = start; idx < result.length; idx++) {
            System.out.println(result[idx]);
        }
    }
}





Key Notes for Beginners

Why loop from right to left?
Because subtraction starts from the units place (rightmost digit), same as in school.

What is borrow?
If the current digit in arr1 is smaller than the digit in arr2, we take 1 from the next left digit (like on paper). That’s why we add 10 to current digit and set borrow = -1.

Why result array size = max(n1, n2)?
Because the difference can’t be longer than the largest number.

Why remove leading zeros?
Example: 00198 should just be 198.



Input
arr1 = [3, 2, 1] → 321
arr2 = [1, 2, 3] → 123
Step-by-step:
Start with last digits → 1 - 3 → borrow → 11 - 3 = 8
Next → (2 - 1 - borrow) = (2 - 1 - 1) = 0 → but borrow handled properly → 9
Next → 3 - 1 = 1
Output:

1
9
8



Approach Explanation (Manual Borrow)
Start from the rightmost digits.
Subtract d1 - d2.
If d1 < d2, then borrow 1 from the next left digit (i.e., add 10 to d1 and carry a -1 borrow).
Store the result in a result array.
Continue until all digits are processed.
Finally, remove leading zeros.
